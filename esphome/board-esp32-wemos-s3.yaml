### ESP32S3 used is a wemos s3 mini

esp32:
  board: lolin_s3
  variant: esp32s3
  framework:
    type: arduino
#    version: latest
  flash_size: 4MB

# the m5stack TOF sensor vl53l0x is I2C
i2c:
  - id: bus_a
    sda: 35  #21   ##35 of  #2 op lolin s3?
    scl: 36  #22   ##36 of  #4 op lolin s3?
    scan: true

# get rid of CDC error
esphome:
  platformio_options:
    board_build.arduino.memory_type: qio_qspi
    board_upload.ram_size: 327680
    board_upload_maximum_size: 4193404
    board_upload_speed: 460800
    build_flags: [
      "-DBOARD_HAS_PSRAM",
      "-DARDUINO_LOLIN_S3_MINI",
      "-DARDUINO_USB_MODE=1"]
#    board_build.extra_flags:
#      - "-DARDUINO_USB_CDC_ON_BOOT=0"  # Override, defaults to '-DARDUINO_USB_CDC_ON_BOOT=1'

# Enable/Disable logging
logger:
  logs:
    esp32.preferences: WARN
    sensor: WARN
    text_sensor: WARN
    switch: WARN
    button: WARN
    number: WARN
  # baud_rate: 0  # <--- super important! for ESP8266

wifi:
  ap:
    ssid: "${name}"
    password: "configesp"

# enable IMPROV wifi, connection hotspot via bluetooth. see https://www.improv-wifi.com/
esp32_improv:
  authorizer: None

captive_portal:

# Enable Web server.
web_server:
  port: 80

## watermeter pulse / relay 1
binary_sensor:
  - platform: gpio
    pin:
      number: 16 # wemos s3 mini: 16, lilygo ESP32S3 T7-S3: 12-1, mh-et-live: 16, wemos d1 mini -D4
      inverted: true
      mode:
        input: true
        pullup: true
    id: clack_watermeter_pulse
    name: ${name} ${clack_watermeter_pulse}
#    icon: mdi:toggle-switch-variant
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - sensor.template.publish:
            id: clack_watermeter
            state: !lambda |-
              return id(totalWaterUsage) += float(${pulse_liters});
        - sensor.template.publish:
            id: clack_m3_left
            state: !lambda |-
              return float(id(clack_capacity_liters).state - id(clack_watermeter).state) * 0.001;
        - sensor.template.publish:
            id: clack_l_left
            state: !lambda |-
              return int(id(clack_capacity_liters).state - id(clack_watermeter).state);

  ## regeneration pulse / relay 2
  - platform: gpio
    pin:
      number: 12 # wemos s3 mini: 12, lilygo ESP32S3 T7-S3: 18, mh-et-live: 18, wemos d1 mini -D5
      inverted: true
      mode:
        input: true
        pullup: true
    id: clack_regeneration_pulse
    name: ${name} ${clack_regeneration_pulse}
#    icon: mdi:toggle-switch-variant
    filters:
      - delayed_on_off: 800ms
    on_press:
      then:
        - globals.set:
            id: totalWaterUsage
            value: '00'
        - text_sensor.template.publish:
            id: clack_regeneration_last
            state: !lambda |-
              char str[32];
              time_t currTime = id(clack_sntp_time).now().timestamp;
              strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
              id(regeneration_last) = str;
              return  { str };
        - sensor.template.publish:
            id: clack_watermeter
            state: !lambda |-
              return id(totalWaterUsage);
        - sensor.template.publish:
            id: clack_m3_left
            state: !lambda |-
              return float(id(clack_capacity_liters).state - id(clack_watermeter).state) * 0.001;
        - sensor.template.publish:
            id: clack_l_left
            state: !lambda |-
              return int(id(clack_capacity_liters).state - id(clack_watermeter).state);
        - if:
            condition:
            - lambda: 'return id(clack_select_chl_or_dpsw).state == "Chlorinator";'
            then:
              - script.execute: chlorinator_start

button:
## temporary test button for testing water meter pulse
  - id: clack_use_test_button
    name: ${name} Test button use pulse
    platform: template
    on_press:
      then:
        - sensor.template.publish:
            id: clack_watermeter
            state: !lambda |-
              return id(totalWaterUsage) += float(${pulse_liters});
        - sensor.template.publish:
            id: clack_m3_left
            state: !lambda |-
              return float(id(clack_capacity_liters).state - id(clack_watermeter).state) * 0.001;
        - sensor.template.publish:
            id: clack_l_left
            state: !lambda |-
              return int(id(clack_capacity_liters).state - id(clack_watermeter).state);
        - lambda: |-
            ESP_LOGI("UseTest", "Use button pressed");

## temporary test button for testing regeneration pulse
  - id: clack_reg_test_button
    name: ${name} Test button regen pulse
    platform: template
    on_press:
      then:
        - globals.set:
            id: totalWaterUsage
            value: '00'
        - text_sensor.template.publish:
            id: clack_regeneration_last
            state: !lambda |-
              char str[32];
              time_t currTime = id(clack_sntp_time).now().timestamp;
              strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
              id(regeneration_last) = str;
              return  { str };
        - sensor.template.publish:
            id: clack_watermeter
            state: !lambda |-
              return id(totalWaterUsage);
        - sensor.template.publish:
            id: clack_m3_left
            state: !lambda |-
              return float(id(clack_capacity_liters).state - id(clack_watermeter).state) * 0.001;
        - sensor.template.publish:
            id: clack_l_left
            state: !lambda |-
              return int(id(clack_capacity_liters).state - id(clack_watermeter).state);
        - lambda: |-
            ESP_LOGI("RegTest", "Regeneration button pressed");
        - if:
            condition:
            - lambda: 'return id(clack_select_chl_or_dpsw).state == "Chlorinator";'
            then:
              - script.execute: chlorinator_start
